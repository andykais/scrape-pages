name: Node CI

on:
  push:
    branches:
      - '*'
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [10, 12, 14]
        os:
        - ubuntu-latest
        - macOS-latest
        - windows-latest # nock scope has an error w/ windows
      fail-fast: false
    steps:

##############################
#         Debugging          #
##############################
    # - name: Dump GitHub context
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    #   run: echo "$GITHUB_CONTEXT"

##############################
#           Test             #
##############################

    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2-beta
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: 'https://registry.npmjs.org'

    # - run: pnpm config set store-dir ~/.pnpm-store
    # - uses: actions/cache@v2
    #   with:
    #     path: ~/.pnpm-store
    #     key: ${{ runner.os }}-pnpm
    #     # because pnpm store has been pruned, we can use a fixed cache key. We do not need to has files here
    #     # key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

    - name: Cache PNPM store
      uses: actions/cache@v2
      with:
        path: ~/.pnpm-store/v3
        key: ${{ runner.os }}-pnpm

    - name: Setup PNPM
      uses: pnpm/action-setup@v1.2.0
      with:
        version: latest

    - run: pnpm install --frozen-lockfile --strict-peer-dependencies
    - run: pnpm run build
    - run: pnpm run test

    - run: pnpm run test:coverage
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '12'
    - name: send coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '12'
      uses: codecov/codecov-action@v1

##############################
#     Test Package Usage     #
##############################
    - run: pnpm run test:packaged
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '10'

##############################
#       NPM Publish          #
##############################
  publish:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.action == 'published'
    env:
      NODE_VERSION: 14
    steps:

    - uses: actions/checkout@v2
      with:
        ref: master

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2-beta
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Cache PNPM store
      uses: actions/cache@v2
      with:
        path: ~/.pnpm-store/v3
        key: ${{ runner.os }}-pnpm

    - name: Setup PNPM
      uses: pnpm/action-setup@v1.2.0
      with:
        version: latest

    - run: pnpm install --frozen-lockfile --strict-peer-dependencies
    - name: pnpm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.github_token }}
        TAG: ${{ github.event.release.tag_name }}
      run: |
        pnpm version --no-git-tag-version $TAG
        pnpm run build
        cd build
        pnpm publish --no-git-checks
        cd ..
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Publish Action"
        git fetch origin master
        git checkout master
        git add package.json
        git commit --message "release $TAG"
        git remote add deploy https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git push deploy master

##############################
#    Deploy Github Pages     #
##############################
# TODO website needs to be updated after this PR is merged.
#    - name: build github pages
#      if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest' && matrix.node-version == '8'
#      run: |
#        cd website
#        npm ci --no-audit
#    - name: github pages
#      if: github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest' && matrix.node-version == '8'
#      uses: peaceiris/actions-gh-pages@v2.1.0
#      env:
#        ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
#        PUBLISH_BRANCH: gh-pages
#        PUBLISH_DIR: ./website/dist



# TODO add a 'test published package script'
