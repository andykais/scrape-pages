"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = __importDefault(require("ts-runtime/lib"));
lib_1.default.declare("Error.631742855", lib_1.default.type("Error", lib_1.default.object(lib_1.default.property("name", lib_1.default.string()), lib_1.default.property("message", lib_1.default.string()), lib_1.default.property("stack", lib_1.default.string(), true), lib_1.default.property("stack", lib_1.default.string(), true))));
lib_1.default.declare("ReadonlyArray.631742855", lib_1.default.type("ReadonlyArray", ReadonlyArray => {
    const T = ReadonlyArray.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("length", lib_1.default.number()), lib_1.default.indexer("n", lib_1.default.number(), T), lib_1.default.property("toString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("concat", lib_1.default.function(lib_1.default.param("items", lib_1.default.union(lib_1.default.array(lib_1.default.ref("ConcatArray.631742855", T)), lib_1.default.array(lib_1.default.union(T, lib_1.default.ref("ConcatArray.631742855", T)))), true), lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("join", lib_1.default.function(lib_1.default.param("separator", lib_1.default.string(), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("slice", lib_1.default.function(lib_1.default.param("start", lib_1.default.number(), true), lib_1.default.param("end", lib_1.default.number(), true), lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("indexOf", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("lastIndexOf", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("every", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("some", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("forEach", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.void()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.void()))), lib_1.default.property("map", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(U))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.array(U))];
    })), lib_1.default.property("filter", lib_1.default.function(fn => {
        const S = fn.typeParameter("S", T);
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean())), lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.any())))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.array(S), lib_1.default.array(T)))];
    })), lib_1.default.property("reduce", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("previousValue", T), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(T)), lib_1.default.function(lib_1.default.param("previousValue", U), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(U)))), lib_1.default.param("initialValue", lib_1.default.union(T, U), true), lib_1.default.return(lib_1.default.union(T, U))];
    })), lib_1.default.property("reduceRight", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("previousValue", T), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(T)), lib_1.default.function(lib_1.default.param("previousValue", U), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(U)))), lib_1.default.param("initialValue", lib_1.default.union(T, U), true), lib_1.default.return(lib_1.default.union(T, U))];
    })), lib_1.default.property("find", lib_1.default.function(fn => {
        const S = fn.typeParameter("S", T);
        return [lib_1.default.param("predicate", lib_1.default.union(lib_1.default.function(lib_1.default.param("this", lib_1.default.void()), lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean())), lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean())))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.union(S, lib_1.default.undef()), lib_1.default.union(T, lib_1.default.undef())))];
    })), lib_1.default.property("findIndex", lib_1.default.function(lib_1.default.param("predicate", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.ref(ReadonlyArray, T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property(Symbol.iterator, lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", T)))), lib_1.default.property("entries", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.tuple(lib_1.default.number(), T))))), lib_1.default.property("keys", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.number())))), lib_1.default.property("values", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", T)))), lib_1.default.property("includes", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.boolean()))));
}));
lib_1.default.declare("Intl.DateTimeFormatOptions.631742855", lib_1.default.type("Intl.DateTimeFormatOptions", lib_1.default.object(lib_1.default.property("localeMatcher", lib_1.default.string(), true), lib_1.default.property("weekday", lib_1.default.string(), true), lib_1.default.property("era", lib_1.default.string(), true), lib_1.default.property("year", lib_1.default.string(), true), lib_1.default.property("month", lib_1.default.string(), true), lib_1.default.property("day", lib_1.default.string(), true), lib_1.default.property("hour", lib_1.default.string(), true), lib_1.default.property("minute", lib_1.default.string(), true), lib_1.default.property("second", lib_1.default.string(), true), lib_1.default.property("timeZoneName", lib_1.default.string(), true), lib_1.default.property("formatMatcher", lib_1.default.string(), true), lib_1.default.property("hour12", lib_1.default.boolean(), true), lib_1.default.property("timeZone", lib_1.default.string(), true))));
lib_1.default.declare("RegExpExecArray.631742855", lib_1.default.type("RegExpExecArray", lib_1.default.intersect(lib_1.default.ref("Array.631742855", lib_1.default.string()), lib_1.default.object(lib_1.default.property("index", lib_1.default.number()), lib_1.default.property("input", lib_1.default.string())))));
lib_1.default.declare("RegExpConstructor.631742855", lib_1.default.type("RegExpConstructor", RegExpConstructor => lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("RegExp.631742855")), lib_1.default.property("$1", lib_1.default.string()), lib_1.default.property("$2", lib_1.default.string()), lib_1.default.property("$3", lib_1.default.string()), lib_1.default.property("$4", lib_1.default.string()), lib_1.default.property("$5", lib_1.default.string()), lib_1.default.property("$6", lib_1.default.string()), lib_1.default.property("$7", lib_1.default.string()), lib_1.default.property("$8", lib_1.default.string()), lib_1.default.property("$9", lib_1.default.string()), lib_1.default.property("lastMatch", lib_1.default.string()), lib_1.default.property(Symbol.species, lib_1.default.ref(RegExpConstructor)), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("pattern", lib_1.default.union(lib_1.default.union(lib_1.default.ref("RegExp.631742855"), lib_1.default.string()), lib_1.default.string(), lib_1.default.ref("RegExp.631742855"))), lib_1.default.param("flags", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("RegExp.631742855")))))));
lib_1.default.declare("RegExpMatchArray.631742855", lib_1.default.type("RegExpMatchArray", lib_1.default.intersect(lib_1.default.ref("Array.631742855", lib_1.default.string()), lib_1.default.object(lib_1.default.property("index", lib_1.default.number(), true), lib_1.default.property("input", lib_1.default.string(), true)))));
lib_1.default.declare("Chai.NumberComparer.3822653483", lib_1.default.type("Chai.NumberComparer", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("value", lib_1.default.union(lib_1.default.number(), lib_1.default.ref("Date.631742855"))), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("DateConstructor.631742855", lib_1.default.type("DateConstructor", lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("Date.631742855")), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("value", lib_1.default.union(lib_1.default.union(lib_1.default.number(), lib_1.default.string()), lib_1.default.number(), lib_1.default.union(lib_1.default.number(), lib_1.default.string(), lib_1.default.ref("Date.631742855"))), true), lib_1.default.param("month", lib_1.default.number(), true), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.param("hours", lib_1.default.number(), true), lib_1.default.param("minutes", lib_1.default.number(), true), lib_1.default.param("seconds", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.union(lib_1.default.ref("Date.631742855"), lib_1.default.string())))), lib_1.default.property("parse", lib_1.default.function(lib_1.default.param("s", lib_1.default.string()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("UTC", lib_1.default.function(lib_1.default.param("year", lib_1.default.number()), lib_1.default.param("month", lib_1.default.number()), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.param("hours", lib_1.default.number(), true), lib_1.default.param("minutes", lib_1.default.number(), true), lib_1.default.param("seconds", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("now", lib_1.default.function(lib_1.default.return(lib_1.default.number()))))));
lib_1.default.declare("Date.631742855", lib_1.default.type("Date", lib_1.default.object(lib_1.default.property("toString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toDateString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toTimeString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleString", lib_1.default.function(lib_1.default.param("locales", lib_1.default.union(lib_1.default.string(), lib_1.default.array(lib_1.default.string())), true), lib_1.default.param("options", lib_1.default.ref("Intl.DateTimeFormatOptions.631742855"), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleDateString", lib_1.default.function(lib_1.default.param("locales", lib_1.default.union(lib_1.default.string(), lib_1.default.array(lib_1.default.string())), true), lib_1.default.param("options", lib_1.default.ref("Intl.DateTimeFormatOptions.631742855"), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleTimeString", lib_1.default.function(lib_1.default.param("locales", lib_1.default.union(lib_1.default.string(), lib_1.default.array(lib_1.default.string())), true), lib_1.default.param("options", lib_1.default.ref("Intl.DateTimeFormatOptions.631742855"), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("valueOf", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getTime", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getFullYear", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCFullYear", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getMonth", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCMonth", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getDate", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCDate", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getDay", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCDay", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getHours", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCHours", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getMinutes", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCMinutes", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getSeconds", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCSeconds", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getMilliseconds", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getUTCMilliseconds", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("getTimezoneOffset", lib_1.default.function(lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setTime", lib_1.default.function(lib_1.default.param("time", lib_1.default.number()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setMilliseconds", lib_1.default.function(lib_1.default.param("ms", lib_1.default.number()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCMilliseconds", lib_1.default.function(lib_1.default.param("ms", lib_1.default.number()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setSeconds", lib_1.default.function(lib_1.default.param("sec", lib_1.default.number()), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCSeconds", lib_1.default.function(lib_1.default.param("sec", lib_1.default.number()), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setMinutes", lib_1.default.function(lib_1.default.param("min", lib_1.default.number()), lib_1.default.param("sec", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCMinutes", lib_1.default.function(lib_1.default.param("min", lib_1.default.number()), lib_1.default.param("sec", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setHours", lib_1.default.function(lib_1.default.param("hours", lib_1.default.number()), lib_1.default.param("min", lib_1.default.number(), true), lib_1.default.param("sec", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCHours", lib_1.default.function(lib_1.default.param("hours", lib_1.default.number()), lib_1.default.param("min", lib_1.default.number(), true), lib_1.default.param("sec", lib_1.default.number(), true), lib_1.default.param("ms", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setDate", lib_1.default.function(lib_1.default.param("date", lib_1.default.number()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCDate", lib_1.default.function(lib_1.default.param("date", lib_1.default.number()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setMonth", lib_1.default.function(lib_1.default.param("month", lib_1.default.number()), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCMonth", lib_1.default.function(lib_1.default.param("month", lib_1.default.number()), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setFullYear", lib_1.default.function(lib_1.default.param("year", lib_1.default.number()), lib_1.default.param("month", lib_1.default.number(), true), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("setUTCFullYear", lib_1.default.function(lib_1.default.param("year", lib_1.default.number()), lib_1.default.param("month", lib_1.default.number(), true), lib_1.default.param("date", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("toUTCString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toISOString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toJSON", lib_1.default.function(lib_1.default.param("key", lib_1.default.any(), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property(Symbol.toPrimitive, lib_1.default.function(lib_1.default.param("hint", lib_1.default.union(lib_1.default.string("default"), lib_1.default.string("string"), lib_1.default.string("number"), lib_1.default.string())), lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.number(), lib_1.default.union(lib_1.default.string(), lib_1.default.number()))))))));
lib_1.default.declare("Chai.Satisfy.3822653483", lib_1.default.type("Chai.Satisfy", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("matcher", lib_1.default.ref("Function.631742855")), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.CloseTo.3822653483", lib_1.default.type("Chai.CloseTo", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("expected", lib_1.default.number()), lib_1.default.param("delta", lib_1.default.number()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Members.3822653483", lib_1.default.type("Chai.Members", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("set", lib_1.default.ref("ReadonlyArray.631742855", lib_1.default.any())), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.PropertyChange.3822653483", lib_1.default.type("Chai.PropertyChange", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("object", lib_1.default.ref("Object.631742855")), lib_1.default.param("property", lib_1.default.string()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.LanguageChains.3822653483", lib_1.default.type("Chai.LanguageChains", lib_1.default.object(lib_1.default.property("to", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("be", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("been", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("is", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("that", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("which", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("and", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("has", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("have", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("with", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("at", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("of", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("same", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("but", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("does", lib_1.default.ref("Chai.Assertion.3822653483")))));
lib_1.default.declare("Chai.NumericComparison.3822653483", lib_1.default.type("Chai.NumericComparison", lib_1.default.object(lib_1.default.property("above", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("gt", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("greaterThan", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("least", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("gte", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("below", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("lt", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("lessThan", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("most", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("lte", lib_1.default.ref("Chai.NumberComparer.3822653483")), lib_1.default.property("within", lib_1.default.function(lib_1.default.param("start", lib_1.default.union(lib_1.default.number(), lib_1.default.ref("Date.631742855"))), lib_1.default.param("finish", lib_1.default.union(lib_1.default.number(), lib_1.default.ref("Date.631742855"))), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("RegExp.631742855", lib_1.default.type("RegExp", lib_1.default.object(lib_1.default.property("source", lib_1.default.string()), lib_1.default.property("global", lib_1.default.boolean()), lib_1.default.property("ignoreCase", lib_1.default.boolean()), lib_1.default.property("multiline", lib_1.default.boolean()), lib_1.default.property("lastIndex", lib_1.default.number()), lib_1.default.property("flags", lib_1.default.string()), lib_1.default.property("sticky", lib_1.default.boolean()), lib_1.default.property("unicode", lib_1.default.boolean()), lib_1.default.property("exec", lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.return(lib_1.default.union(lib_1.default.ref("RegExpExecArray.631742855"), lib_1.default.null())))), lib_1.default.property("test", lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("compile", lib_1.default.function(lib_1.default.return(lib_1.default.this(this)))), lib_1.default.property(Symbol.match, lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.return(lib_1.default.union(lib_1.default.ref("RegExpMatchArray.631742855"), lib_1.default.null())))), lib_1.default.property(Symbol.replace, lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.param("replaceValue", lib_1.default.union(lib_1.default.string(), lib_1.default.function(lib_1.default.param("substring", lib_1.default.string()), lib_1.default.rest("args", lib_1.default.array(lib_1.default.any())), lib_1.default.return(lib_1.default.string())))), lib_1.default.return(lib_1.default.string()))), lib_1.default.property(Symbol.search, lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.return(lib_1.default.number()))), lib_1.default.property(Symbol.split, lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.param("limit", lib_1.default.number(), true), lib_1.default.return(lib_1.default.array(lib_1.default.string())))))));
lib_1.default.declare("Chai.InstanceOf.3822653483", lib_1.default.type("Chai.InstanceOf", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("constructor", lib_1.default.ref("Object.631742855")), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("NodeJS.CallSite.715303944", lib_1.default.type("NodeJS.CallSite", lib_1.default.object(lib_1.default.property("getThis", lib_1.default.function(lib_1.default.return(lib_1.default.any()))), lib_1.default.property("getTypeName", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.null())))), lib_1.default.property("getFunction", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.ref("Function.631742855"), lib_1.default.undef())))), lib_1.default.property("getFunctionName", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.null())))), lib_1.default.property("getMethodName", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.null())))), lib_1.default.property("getFileName", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.null())))), lib_1.default.property("getLineNumber", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.number(), lib_1.default.null())))), lib_1.default.property("getColumnNumber", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.number(), lib_1.default.null())))), lib_1.default.property("getEvalOrigin", lib_1.default.function(lib_1.default.return(lib_1.default.union(lib_1.default.string(), lib_1.default.undef())))), lib_1.default.property("isToplevel", lib_1.default.function(lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isEval", lib_1.default.function(lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isNative", lib_1.default.function(lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isConstructor", lib_1.default.function(lib_1.default.return(lib_1.default.boolean()))))));
lib_1.default.declare("IteratorResult.2719799386", lib_1.default.type("IteratorResult", IteratorResult => {
    const T = IteratorResult.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("done", lib_1.default.boolean()), lib_1.default.property("value", T));
}));
lib_1.default.declare("Readonly.631742855", lib_1.default.type("Readonly", Readonly => {
    const T = Readonly.typeParameter("T");
    return lib_1.default.any();
}));
lib_1.default.declare("ArrayLike.631742855", lib_1.default.type("ArrayLike", ArrayLike => {
    const T = ArrayLike.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("length", lib_1.default.number()), lib_1.default.indexer("n", lib_1.default.number(), T));
}));
lib_1.default.declare("TypedPropertyDescriptor.631742855", lib_1.default.type("TypedPropertyDescriptor", TypedPropertyDescriptor => {
    const T = TypedPropertyDescriptor.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("enumerable", lib_1.default.boolean(), true), lib_1.default.property("configurable", lib_1.default.boolean(), true), lib_1.default.property("writable", lib_1.default.boolean(), true), lib_1.default.property("value", T, true), lib_1.default.property("get", lib_1.default.function(lib_1.default.return(T)), true), lib_1.default.property("set", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.return(lib_1.default.void())), true));
}));
lib_1.default.declare("ConcatArray.631742855", lib_1.default.type("ConcatArray", ConcatArray => {
    const T = ConcatArray.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("length", lib_1.default.number()), lib_1.default.indexer("n", lib_1.default.number(), T), lib_1.default.property("join", lib_1.default.function(lib_1.default.param("separator", lib_1.default.string(), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("slice", lib_1.default.function(lib_1.default.param("start", lib_1.default.number(), true), lib_1.default.param("end", lib_1.default.number(), true), lib_1.default.return(lib_1.default.array(T)))));
}));
lib_1.default.declare("IterableIterator.2719799386", lib_1.default.type("IterableIterator", IterableIterator => {
    const T = IterableIterator.typeParameter("T");
    return lib_1.default.intersect(lib_1.default.ref("Iterator.2719799386", T), lib_1.default.object(lib_1.default.property(Symbol.iterator, lib_1.default.function(lib_1.default.return(lib_1.default.ref(IterableIterator, T))))));
}));
lib_1.default.declare("Iterator.2719799386", lib_1.default.type("Iterator", Iterator => {
    const T = Iterator.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("next", lib_1.default.function(lib_1.default.param("value", lib_1.default.any(), true), lib_1.default.return(lib_1.default.ref("IteratorResult.2719799386", T)))), lib_1.default.property("return", lib_1.default.function(lib_1.default.param("value", lib_1.default.any(), true), lib_1.default.return(lib_1.default.ref("IteratorResult.2719799386", T)))), lib_1.default.property("throw", lib_1.default.function(lib_1.default.param("e", lib_1.default.any(), true), lib_1.default.return(lib_1.default.ref("IteratorResult.2719799386", T)))));
}));
lib_1.default.declare("ErrorConstructor.631742855", lib_1.default.type("ErrorConstructor", lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("Error.631742855")), lib_1.default.property("prepareStackTrace", lib_1.default.function(lib_1.default.param("err", lib_1.default.ref("Error.631742855")), lib_1.default.param("stackTraces", lib_1.default.array(lib_1.default.ref("NodeJS.CallSite.715303944"))), lib_1.default.return(lib_1.default.any())), true), lib_1.default.property("stackTraceLimit", lib_1.default.number()), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Error.631742855")))), lib_1.default.property("captureStackTrace", lib_1.default.function(lib_1.default.param("targetObject", lib_1.default.ref("Object.631742855")), lib_1.default.param("constructorOpt", lib_1.default.ref("Function.631742855"), true), lib_1.default.return(lib_1.default.void()))))));
lib_1.default.declare("Chai.Deep.3822653483", lib_1.default.type("Chai.Deep", lib_1.default.object(lib_1.default.property("equal", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("equals", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("eq", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("include", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("property", lib_1.default.ref("Chai.Property.3822653483")), lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")), lib_1.default.property("ordered", lib_1.default.ref("Chai.Ordered.3822653483")), lib_1.default.property("nested", lib_1.default.ref("Chai.Nested.3822653483")))));
lib_1.default.declare("Chai.Ordered.3822653483", lib_1.default.type("Chai.Ordered", lib_1.default.object(lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")))));
lib_1.default.declare("Chai.Nested.3822653483", lib_1.default.type("Chai.Nested", lib_1.default.object(lib_1.default.property("include", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("property", lib_1.default.ref("Chai.Property.3822653483")), lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")))));
lib_1.default.declare("Chai.KeyFilter.3822653483", lib_1.default.type("Chai.KeyFilter", lib_1.default.object(lib_1.default.property("keys", lib_1.default.ref("Chai.Keys.3822653483")), lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")))));
lib_1.default.declare("Chai.TypeComparison.3822653483", lib_1.default.type("Chai.TypeComparison", lib_1.default.object(lib_1.default.property("instanceof", lib_1.default.ref("Chai.InstanceOf.3822653483")), lib_1.default.property("instanceOf", lib_1.default.ref("Chai.InstanceOf.3822653483")), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("type", lib_1.default.string()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Include.3822653483", lib_1.default.type("Chai.Include", lib_1.default.object(lib_1.default.property("keys", lib_1.default.ref("Chai.Keys.3822653483")), lib_1.default.property("deep", lib_1.default.ref("Chai.Deep.3822653483")), lib_1.default.property("ordered", lib_1.default.ref("Chai.Ordered.3822653483")), lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")), lib_1.default.property("any", lib_1.default.ref("Chai.KeyFilter.3822653483")), lib_1.default.property("all", lib_1.default.ref("Chai.KeyFilter.3822653483")), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("value", lib_1.default.union(lib_1.default.ref("Object.631742855"), lib_1.default.string(), lib_1.default.number())), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Equal.3822653483", lib_1.default.type("Chai.Equal", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("value", lib_1.default.any()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Property.3822653483", lib_1.default.type("Chai.Property", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("name", lib_1.default.string()), lib_1.default.param("value", lib_1.default.any(), true), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.OwnProperty.3822653483", lib_1.default.type("Chai.OwnProperty", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("name", lib_1.default.string()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.OwnPropertyDescriptor.3822653483", lib_1.default.type("Chai.OwnPropertyDescriptor", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("name", lib_1.default.string()), lib_1.default.param("descriptor", lib_1.default.union(lib_1.default.ref("PropertyDescriptor.631742855"), lib_1.default.string()), true), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Length.3822653483", lib_1.default.type("Chai.Length", lib_1.default.intersect(lib_1.default.ref("Chai.LanguageChains.3822653483"), lib_1.default.ref("Chai.NumericComparison.3822653483"), lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("length", lib_1.default.number()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483"))))))));
lib_1.default.declare("Chai.Match.3822653483", lib_1.default.type("Chai.Match", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("regexp", lib_1.default.ref("RegExp.631742855")), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Keys.3822653483", lib_1.default.type("Chai.Keys", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("keys", lib_1.default.union(lib_1.default.array(lib_1.default.string()), lib_1.default.union(lib_1.default.ref("ReadonlyArray.631742855", lib_1.default.any()), lib_1.default.ref("Object.631742855"))), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Throw.3822653483", lib_1.default.type("Chai.Throw", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("expected", lib_1.default.union(lib_1.default.union(lib_1.default.string(), lib_1.default.ref("RegExp.631742855")), lib_1.default.union(lib_1.default.ref("Error.631742855"), lib_1.default.ref("Function.631742855"))), true), lib_1.default.param("message", lib_1.default.union(lib_1.default.string(), lib_1.default.union(lib_1.default.string(), lib_1.default.ref("RegExp.631742855"))), true), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.RespondTo.3822653483", lib_1.default.type("Chai.RespondTo", lib_1.default.object(lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("method", lib_1.default.string()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("Chai.Assertion.3822653483")))))));
lib_1.default.declare("Chai.Assertion.3822653483", lib_1.default.type("Chai.Assertion", Assertion => lib_1.default.intersect(lib_1.default.ref("Chai.LanguageChains.3822653483"), lib_1.default.ref("Chai.NumericComparison.3822653483"), lib_1.default.ref("Chai.TypeComparison.3822653483"), lib_1.default.object(lib_1.default.property("not", lib_1.default.ref(Assertion)), lib_1.default.property("deep", lib_1.default.ref("Chai.Deep.3822653483")), lib_1.default.property("ordered", lib_1.default.ref("Chai.Ordered.3822653483")), lib_1.default.property("nested", lib_1.default.ref("Chai.Nested.3822653483")), lib_1.default.property("any", lib_1.default.ref("Chai.KeyFilter.3822653483")), lib_1.default.property("all", lib_1.default.ref("Chai.KeyFilter.3822653483")), lib_1.default.property("a", lib_1.default.ref("Chai.TypeComparison.3822653483")), lib_1.default.property("an", lib_1.default.ref("Chai.TypeComparison.3822653483")), lib_1.default.property("include", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("includes", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("contain", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("contains", lib_1.default.ref("Chai.Include.3822653483")), lib_1.default.property("ok", lib_1.default.ref(Assertion)), lib_1.default.property("true", lib_1.default.ref(Assertion)), lib_1.default.property("false", lib_1.default.ref(Assertion)), lib_1.default.property("null", lib_1.default.ref(Assertion)), lib_1.default.property("undefined", lib_1.default.ref(Assertion)), lib_1.default.property("NaN", lib_1.default.ref(Assertion)), lib_1.default.property("exist", lib_1.default.ref(Assertion)), lib_1.default.property("empty", lib_1.default.ref(Assertion)), lib_1.default.property("arguments", lib_1.default.ref(Assertion)), lib_1.default.property("Arguments", lib_1.default.ref(Assertion)), lib_1.default.property("equal", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("equals", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("eq", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("eql", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("eqls", lib_1.default.ref("Chai.Equal.3822653483")), lib_1.default.property("property", lib_1.default.ref("Chai.Property.3822653483")), lib_1.default.property("ownProperty", lib_1.default.ref("Chai.OwnProperty.3822653483")), lib_1.default.property("haveOwnProperty", lib_1.default.ref("Chai.OwnProperty.3822653483")), lib_1.default.property("ownPropertyDescriptor", lib_1.default.ref("Chai.OwnPropertyDescriptor.3822653483")), lib_1.default.property("haveOwnPropertyDescriptor", lib_1.default.ref("Chai.OwnPropertyDescriptor.3822653483")), lib_1.default.property("length", lib_1.default.ref("Chai.Length.3822653483")), lib_1.default.property("lengthOf", lib_1.default.ref("Chai.Length.3822653483")), lib_1.default.property("match", lib_1.default.ref("Chai.Match.3822653483")), lib_1.default.property("matches", lib_1.default.ref("Chai.Match.3822653483")), lib_1.default.property("keys", lib_1.default.ref("Chai.Keys.3822653483")), lib_1.default.property("throw", lib_1.default.ref("Chai.Throw.3822653483")), lib_1.default.property("throws", lib_1.default.ref("Chai.Throw.3822653483")), lib_1.default.property("Throw", lib_1.default.ref("Chai.Throw.3822653483")), lib_1.default.property("respondTo", lib_1.default.ref("Chai.RespondTo.3822653483")), lib_1.default.property("respondsTo", lib_1.default.ref("Chai.RespondTo.3822653483")), lib_1.default.property("itself", lib_1.default.ref(Assertion)), lib_1.default.property("satisfy", lib_1.default.ref("Chai.Satisfy.3822653483")), lib_1.default.property("satisfies", lib_1.default.ref("Chai.Satisfy.3822653483")), lib_1.default.property("closeTo", lib_1.default.ref("Chai.CloseTo.3822653483")), lib_1.default.property("approximately", lib_1.default.ref("Chai.CloseTo.3822653483")), lib_1.default.property("members", lib_1.default.ref("Chai.Members.3822653483")), lib_1.default.property("increase", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("increases", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("decrease", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("decreases", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("change", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("changes", lib_1.default.ref("Chai.PropertyChange.3822653483")), lib_1.default.property("extensible", lib_1.default.ref(Assertion)), lib_1.default.property("sealed", lib_1.default.ref(Assertion)), lib_1.default.property("frozen", lib_1.default.ref(Assertion)), lib_1.default.property("string", lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref(Assertion)))), lib_1.default.property("key", lib_1.default.function(lib_1.default.param("string", lib_1.default.string()), lib_1.default.return(lib_1.default.ref(Assertion)))), lib_1.default.property("oneOf", lib_1.default.function(lib_1.default.param("list", lib_1.default.ref("ReadonlyArray.631742855", lib_1.default.any())), lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref(Assertion))))))));
lib_1.default.declare("ArrayConstructor.631742855", lib_1.default.type("ArrayConstructor", ArrayConstructor => lib_1.default.object(lib_1.default.property("prototype", lib_1.default.array(lib_1.default.any())), lib_1.default.property(Symbol.species, lib_1.default.ref(ArrayConstructor)), lib_1.default.callProperty(lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("arrayLength", lib_1.default.union(lib_1.default.number(), lib_1.default.number(), lib_1.default.array(T)), true), lib_1.default.return(lib_1.default.union(lib_1.default.array(lib_1.default.any()), lib_1.default.array(T)))];
})), lib_1.default.property("isArray", lib_1.default.function(lib_1.default.param("arg", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("from", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    const U = fn.typeParameter("U");
    return [lib_1.default.param("arrayLike", lib_1.default.union(lib_1.default.ref("ArrayLike.631742855", T), lib_1.default.union(lib_1.default.ref("Iterable.2719799386", T), lib_1.default.ref("ArrayLike.631742855", T)))), lib_1.default.param("mapfn", lib_1.default.function(lib_1.default.param("v", T), lib_1.default.param("k", lib_1.default.number()), lib_1.default.return(U)), true), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.array(T), lib_1.default.array(U)))];
})), lib_1.default.property("of", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("items", lib_1.default.array(T), true), lib_1.default.return(lib_1.default.array(T))];
})))));
lib_1.default.declare("Iterable.2719799386", lib_1.default.type("Iterable", Iterable => {
    const T = Iterable.typeParameter("T");
    return lib_1.default.object(lib_1.default.property(Symbol.iterator, lib_1.default.function(lib_1.default.return(lib_1.default.ref("Iterator.2719799386", T)))));
}));
lib_1.default.declare("Map.2685527372", lib_1.default.type("Map", Map => {
    const K = Map.typeParameter("K");
    const V = Map.typeParameter("V");
    return lib_1.default.object(lib_1.default.property("size", lib_1.default.number()), lib_1.default.property(Symbol.toStringTag, lib_1.default.string()), lib_1.default.property("clear", lib_1.default.function(lib_1.default.return(lib_1.default.void()))), lib_1.default.property("delete", lib_1.default.function(lib_1.default.param("key", K), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("forEach", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", V), lib_1.default.param("key", K), lib_1.default.param("map", lib_1.default.ref(Map, K, V)), lib_1.default.return(lib_1.default.void()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.void()))), lib_1.default.property("get", lib_1.default.function(lib_1.default.param("key", K), lib_1.default.return(lib_1.default.union(V, lib_1.default.undef())))), lib_1.default.property("has", lib_1.default.function(lib_1.default.param("key", K), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("set", lib_1.default.function(lib_1.default.param("key", K), lib_1.default.param("value", V), lib_1.default.return(lib_1.default.this(this)))), lib_1.default.property(Symbol.iterator, lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.tuple(K, V))))), lib_1.default.property("entries", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.tuple(K, V))))), lib_1.default.property("keys", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", K)))), lib_1.default.property("values", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", V)))));
}));
lib_1.default.declare("MapConstructor.2685527372", lib_1.default.type("MapConstructor", MapConstructor => lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("Map.2685527372", lib_1.default.any(), lib_1.default.any())), lib_1.default.property(Symbol.species, lib_1.default.ref(MapConstructor)), lib_1.default.callProperty(lib_1.default.function(fn => {
    const K = fn.typeParameter("K");
    const V = fn.typeParameter("V");
    return [lib_1.default.param("entries", lib_1.default.union(lib_1.default.union(lib_1.default.ref("ReadonlyArray.631742855", lib_1.default.tuple(K, V)), lib_1.default.null()), lib_1.default.ref("Iterable.2719799386", lib_1.default.tuple(K, V))), true), lib_1.default.return(lib_1.default.union(lib_1.default.ref("Map.2685527372", lib_1.default.any(), lib_1.default.any()), lib_1.default.ref("Map.2685527372", K, V)))];
})))));
lib_1.default.declare("Array.631742855", lib_1.default.type("Array", Array => {
    const T = Array.typeParameter("T");
    return lib_1.default.object(lib_1.default.property("length", lib_1.default.number()), lib_1.default.indexer("n", lib_1.default.number(), T), lib_1.default.property("toString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("pop", lib_1.default.function(lib_1.default.return(lib_1.default.union(T, lib_1.default.undef())))), lib_1.default.property("push", lib_1.default.function(lib_1.default.param("items", lib_1.default.array(T), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("concat", lib_1.default.function(lib_1.default.param("items", lib_1.default.union(lib_1.default.array(lib_1.default.ref("ConcatArray.631742855", T)), lib_1.default.array(lib_1.default.union(T, lib_1.default.ref("ConcatArray.631742855", T)))), true), lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("join", lib_1.default.function(lib_1.default.param("separator", lib_1.default.string(), true), lib_1.default.return(lib_1.default.string()))), lib_1.default.property("reverse", lib_1.default.function(lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("shift", lib_1.default.function(lib_1.default.return(lib_1.default.union(T, lib_1.default.undef())))), lib_1.default.property("slice", lib_1.default.function(lib_1.default.param("start", lib_1.default.number(), true), lib_1.default.param("end", lib_1.default.number(), true), lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("sort", lib_1.default.function(lib_1.default.param("compareFn", lib_1.default.function(lib_1.default.param("a", T), lib_1.default.param("b", T), lib_1.default.return(lib_1.default.number())), true), lib_1.default.return(lib_1.default.this(this)))), lib_1.default.property("splice", lib_1.default.function(lib_1.default.param("start", lib_1.default.number()), lib_1.default.param("deleteCount", lib_1.default.union(lib_1.default.number(), lib_1.default.number()), true), lib_1.default.param("items", lib_1.default.array(T), true), lib_1.default.return(lib_1.default.array(T)))), lib_1.default.property("unshift", lib_1.default.function(lib_1.default.param("items", lib_1.default.array(T), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("indexOf", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("lastIndexOf", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("every", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("some", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("forEach", lib_1.default.function(lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(lib_1.default.void()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.void()))), lib_1.default.property("map", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(U))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.array(U))];
    })), lib_1.default.property("filter", lib_1.default.function(fn => {
        const S = fn.typeParameter("S", T);
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean())), lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(lib_1.default.any())))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.array(S), lib_1.default.array(T)))];
    })), lib_1.default.property("reduce", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("previousValue", T), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(T)), lib_1.default.function(lib_1.default.param("previousValue", U), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(U)))), lib_1.default.param("initialValue", lib_1.default.union(T, U), true), lib_1.default.return(lib_1.default.union(T, U))];
    })), lib_1.default.property("reduceRight", lib_1.default.function(fn => {
        const U = fn.typeParameter("U");
        return [lib_1.default.param("callbackfn", lib_1.default.union(lib_1.default.function(lib_1.default.param("previousValue", T), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(T)), lib_1.default.function(lib_1.default.param("previousValue", U), lib_1.default.param("currentValue", T), lib_1.default.param("currentIndex", lib_1.default.number()), lib_1.default.param("array", lib_1.default.array(T)), lib_1.default.return(U)))), lib_1.default.param("initialValue", lib_1.default.union(T, U), true), lib_1.default.return(lib_1.default.union(T, U))];
    })), lib_1.default.property("find", lib_1.default.function(fn => {
        const S = fn.typeParameter("S", T);
        return [lib_1.default.param("predicate", lib_1.default.union(lib_1.default.function(lib_1.default.param("this", lib_1.default.void()), lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean())), lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean())))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.union(S, lib_1.default.undef()), lib_1.default.union(T, lib_1.default.undef())))];
    })), lib_1.default.property("findIndex", lib_1.default.function(lib_1.default.param("predicate", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("index", lib_1.default.number()), lib_1.default.param("obj", lib_1.default.array(T)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.param("thisArg", lib_1.default.any(), true), lib_1.default.return(lib_1.default.number()))), lib_1.default.property("fill", lib_1.default.function(lib_1.default.param("value", T), lib_1.default.param("start", lib_1.default.number(), true), lib_1.default.param("end", lib_1.default.number(), true), lib_1.default.return(lib_1.default.this(this)))), lib_1.default.property("copyWithin", lib_1.default.function(lib_1.default.param("target", lib_1.default.number()), lib_1.default.param("start", lib_1.default.number()), lib_1.default.param("end", lib_1.default.number(), true), lib_1.default.return(lib_1.default.this(this)))), lib_1.default.property(Symbol.iterator, lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", T)))), lib_1.default.property("entries", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.tuple(lib_1.default.number(), T))))), lib_1.default.property("keys", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", lib_1.default.number())))), lib_1.default.property("values", lib_1.default.function(lib_1.default.return(lib_1.default.ref("IterableIterator.2719799386", T)))), lib_1.default.property(Symbol.unscopables, lib_1.default.function(lib_1.default.return(lib_1.default.object(lib_1.default.property("copyWithin", lib_1.default.boolean()), lib_1.default.property("entries", lib_1.default.boolean()), lib_1.default.property("fill", lib_1.default.boolean()), lib_1.default.property("find", lib_1.default.boolean()), lib_1.default.property("findIndex", lib_1.default.boolean()), lib_1.default.property("keys", lib_1.default.boolean()), lib_1.default.property("values", lib_1.default.boolean()))))), lib_1.default.property("includes", lib_1.default.function(lib_1.default.param("searchElement", T), lib_1.default.param("fromIndex", lib_1.default.number(), true), lib_1.default.return(lib_1.default.boolean()))));
}));
lib_1.default.declare("RangeError.631742855", lib_1.default.type("RangeError", lib_1.default.intersect(lib_1.default.ref("Error.631742855"), lib_1.default.object())));
lib_1.default.declare("Object.631742855", lib_1.default.type("Object", Object => lib_1.default.object(lib_1.default.property("constructor", lib_1.default.ref("Function.631742855")), lib_1.default.property("should", lib_1.default.ref("Chai.Assertion.3822653483")), lib_1.default.property("toString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("toLocaleString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property("valueOf", lib_1.default.function(lib_1.default.return(lib_1.default.ref(Object)))), lib_1.default.property("hasOwnProperty", lib_1.default.function(lib_1.default.param("v", lib_1.default.ref("PropertyKey.631742855")), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isPrototypeOf", lib_1.default.function(lib_1.default.param("v", lib_1.default.ref(Object)), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("propertyIsEnumerable", lib_1.default.function(lib_1.default.param("v", lib_1.default.ref("PropertyKey.631742855")), lib_1.default.return(lib_1.default.boolean()))))));
lib_1.default.declare("PropertyKey.631742855", lib_1.default.type("PropertyKey", lib_1.default.union(lib_1.default.string(), lib_1.default.number(), lib_1.default.symbol())));
lib_1.default.declare("PropertyDescriptor.631742855", lib_1.default.type("PropertyDescriptor", lib_1.default.object(lib_1.default.property("configurable", lib_1.default.boolean(), true), lib_1.default.property("enumerable", lib_1.default.boolean(), true), lib_1.default.property("value", lib_1.default.any(), true), lib_1.default.property("writable", lib_1.default.boolean(), true), lib_1.default.property("get", lib_1.default.function(lib_1.default.return(lib_1.default.any()))), lib_1.default.property("set", lib_1.default.function(lib_1.default.param("v", lib_1.default.any()), lib_1.default.return(lib_1.default.void()))))));
lib_1.default.declare("PropertyDescriptorMap.631742855", lib_1.default.type("PropertyDescriptorMap", lib_1.default.object(lib_1.default.indexer("s", lib_1.default.string(), lib_1.default.ref("PropertyDescriptor.631742855")))));
lib_1.default.declare("ThisType.631742855", lib_1.default.type("ThisType", ThisType => {
    const T = ThisType.typeParameter("T");
    return lib_1.default.object();
}));
lib_1.default.declare("Function.631742855", lib_1.default.type("Function", Function => lib_1.default.object(lib_1.default.property("prototype", lib_1.default.any()), lib_1.default.property("length", lib_1.default.number()), lib_1.default.property("arguments", lib_1.default.any()), lib_1.default.property("caller", lib_1.default.ref(Function)), lib_1.default.property("name", lib_1.default.string()), lib_1.default.property("apply", lib_1.default.function(lib_1.default.param("this", lib_1.default.ref(Function)), lib_1.default.param("thisArg", lib_1.default.any()), lib_1.default.param("argArray", lib_1.default.any(), true), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("call", lib_1.default.function(lib_1.default.param("this", lib_1.default.ref(Function)), lib_1.default.param("thisArg", lib_1.default.any()), lib_1.default.param("argArray", lib_1.default.array(lib_1.default.any()), true), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("bind", lib_1.default.function(lib_1.default.param("this", lib_1.default.ref(Function)), lib_1.default.param("thisArg", lib_1.default.any()), lib_1.default.param("argArray", lib_1.default.array(lib_1.default.any()), true), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("toString", lib_1.default.function(lib_1.default.return(lib_1.default.string()))), lib_1.default.property(Symbol.hasInstance, lib_1.default.function(lib_1.default.param("value", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))))));
lib_1.default.declare("ObjectConstructor.631742855", lib_1.default.type("ObjectConstructor", lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("Object.631742855")), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("value", lib_1.default.any(), true), lib_1.default.return(lib_1.default.union(lib_1.default.ref("Object.631742855"), lib_1.default.any())))), lib_1.default.property("getPrototypeOf", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("getOwnPropertyDescriptor", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.param("p", lib_1.default.ref("PropertyKey.631742855")), lib_1.default.return(lib_1.default.union(lib_1.default.ref("PropertyDescriptor.631742855"), lib_1.default.undef())))), lib_1.default.property("getOwnPropertyNames", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.array(lib_1.default.string())))), lib_1.default.property("create", lib_1.default.function(lib_1.default.param("o", lib_1.default.union(lib_1.default.object(), lib_1.default.null())), lib_1.default.param("properties", lib_1.default.intersection(lib_1.default.ref("PropertyDescriptorMap.631742855"), lib_1.default.ref("ThisType.631742855", lib_1.default.any())), true), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("defineProperty", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.param("p", lib_1.default.ref("PropertyKey.631742855")), lib_1.default.param("attributes", lib_1.default.intersection(lib_1.default.ref("PropertyDescriptor.631742855"), lib_1.default.ref("ThisType.631742855", lib_1.default.any()))), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("defineProperties", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.param("properties", lib_1.default.intersection(lib_1.default.ref("PropertyDescriptorMap.631742855"), lib_1.default.ref("ThisType.631742855", lib_1.default.any()))), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("seal", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("o", T), lib_1.default.return(T)];
})), lib_1.default.property("freeze", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("a", lib_1.default.union(lib_1.default.array(T), T)), lib_1.default.return(lib_1.default.union(lib_1.default.ref("ReadonlyArray.631742855", T), T, lib_1.default.ref("Readonly.631742855", T)))];
})), lib_1.default.property("preventExtensions", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("o", T), lib_1.default.return(T)];
})), lib_1.default.property("isSealed", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isFrozen", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("isExtensible", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("keys", lib_1.default.function(lib_1.default.param("o", lib_1.default.object()), lib_1.default.return(lib_1.default.array(lib_1.default.string())))), lib_1.default.property("assign", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    const U = fn.typeParameter("U");
    const V = fn.typeParameter("V");
    const W = fn.typeParameter("W");
    return [lib_1.default.param("target", lib_1.default.union(T, lib_1.default.object())), lib_1.default.param("source", lib_1.default.union(U, lib_1.default.array(lib_1.default.any())), true), lib_1.default.param("source2", V, true), lib_1.default.param("source3", W, true), lib_1.default.return(lib_1.default.union(lib_1.default.intersection(T, U), lib_1.default.intersection(T, U, V), lib_1.default.intersection(T, U, V, W), lib_1.default.any()))];
})), lib_1.default.property("getOwnPropertySymbols", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.return(lib_1.default.array(lib_1.default.symbol())))), lib_1.default.property("is", lib_1.default.function(lib_1.default.param("value1", lib_1.default.any()), lib_1.default.param("value2", lib_1.default.any()), lib_1.default.return(lib_1.default.boolean()))), lib_1.default.property("setPrototypeOf", lib_1.default.function(lib_1.default.param("o", lib_1.default.any()), lib_1.default.param("proto", lib_1.default.union(lib_1.default.object(), lib_1.default.null())), lib_1.default.return(lib_1.default.any()))), lib_1.default.property("values", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("o", lib_1.default.union(lib_1.default.union(lib_1.default.object(lib_1.default.indexer("s", lib_1.default.string(), T)), lib_1.default.ref("ArrayLike.631742855", T)), lib_1.default.object())), lib_1.default.return(lib_1.default.union(lib_1.default.array(T), lib_1.default.array(lib_1.default.any())))];
})), lib_1.default.property("entries", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("o", lib_1.default.union(lib_1.default.union(lib_1.default.object(lib_1.default.indexer("s", lib_1.default.string(), T)), lib_1.default.ref("ArrayLike.631742855", T)), lib_1.default.object())), lib_1.default.return(lib_1.default.union(lib_1.default.array(lib_1.default.tuple(lib_1.default.string(), T)), lib_1.default.array(lib_1.default.tuple(lib_1.default.string(), lib_1.default.any()))))];
})), lib_1.default.property("getOwnPropertyDescriptors", lib_1.default.function(fn => {
    const T = fn.typeParameter("T");
    return [lib_1.default.param("o", T), lib_1.default.return(lib_1.default.intersection(lib_1.default.any(), lib_1.default.object(lib_1.default.indexer("x", lib_1.default.string(), lib_1.default.ref("PropertyDescriptor.631742855")))))];
})))));
lib_1.default.declare("RangeErrorConstructor.631742855", lib_1.default.type("RangeErrorConstructor", lib_1.default.object(lib_1.default.property("prototype", lib_1.default.ref("RangeError.631742855")), lib_1.default.callProperty(lib_1.default.function(lib_1.default.param("message", lib_1.default.string(), true), lib_1.default.return(lib_1.default.ref("RangeError.631742855")))))));
//# sourceMappingURL=module.jsx.map
